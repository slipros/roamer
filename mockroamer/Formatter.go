// Code generated by mockery. DO NOT EDIT.

package mockroamer

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// Formatter is an autogenerated mock type for the Formatter type
type Formatter struct {
	mock.Mock
}

type Formatter_Expecter struct {
	mock *mock.Mock
}

func (_m *Formatter) EXPECT() *Formatter_Expecter {
	return &Formatter_Expecter{mock: &_m.Mock}
}

// Format provides a mock function with given fields: tag, ptr
func (_m *Formatter) Format(tag reflect.StructTag, ptr interface{}) error {
	ret := _m.Called(tag, ptr)

	if len(ret) == 0 {
		panic("no return value specified for Format")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(reflect.StructTag, interface{}) error); ok {
		r0 = rf(tag, ptr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Formatter_Format_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Format'
type Formatter_Format_Call struct {
	*mock.Call
}

// Format is a helper method to define mock.On call
//   - tag reflect.StructTag
//   - ptr interface{}
func (_e *Formatter_Expecter) Format(tag interface{}, ptr interface{}) *Formatter_Format_Call {
	return &Formatter_Format_Call{Call: _e.mock.On("Format", tag, ptr)}
}

func (_c *Formatter_Format_Call) Run(run func(tag reflect.StructTag, ptr interface{})) *Formatter_Format_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.StructTag), args[1].(interface{}))
	})
	return _c
}

func (_c *Formatter_Format_Call) Return(_a0 error) *Formatter_Format_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Formatter_Format_Call) RunAndReturn(run func(reflect.StructTag, interface{}) error) *Formatter_Format_Call {
	_c.Call.Return(run)
	return _c
}

// Tag provides a mock function with no fields
func (_m *Formatter) Tag() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Formatter_Tag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tag'
type Formatter_Tag_Call struct {
	*mock.Call
}

// Tag is a helper method to define mock.On call
func (_e *Formatter_Expecter) Tag() *Formatter_Tag_Call {
	return &Formatter_Tag_Call{Call: _e.mock.On("Tag")}
}

func (_c *Formatter_Tag_Call) Run(run func()) *Formatter_Tag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Formatter_Tag_Call) Return(_a0 string) *Formatter_Tag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Formatter_Tag_Call) RunAndReturn(run func() string) *Formatter_Tag_Call {
	_c.Call.Return(run)
	return _c
}

// NewFormatter creates a new instance of Formatter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFormatter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Formatter {
	mock := &Formatter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
