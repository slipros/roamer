// Code generated by mockery. DO NOT EDIT.

package mockroamer

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// ReflectValueFormatter is an autogenerated mock type for the ReflectValueFormatter type
type ReflectValueFormatter struct {
	mock.Mock
}

type ReflectValueFormatter_Expecter struct {
	mock *mock.Mock
}

func (_m *ReflectValueFormatter) EXPECT() *ReflectValueFormatter_Expecter {
	return &ReflectValueFormatter_Expecter{mock: &_m.Mock}
}

// FormatReflectValue provides a mock function with given fields: tag, val
func (_m *ReflectValueFormatter) FormatReflectValue(tag reflect.StructTag, val reflect.Value) error {
	ret := _m.Called(tag, val)

	if len(ret) == 0 {
		panic("no return value specified for FormatReflectValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(reflect.StructTag, reflect.Value) error); ok {
		r0 = rf(tag, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReflectValueFormatter_FormatReflectValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FormatReflectValue'
type ReflectValueFormatter_FormatReflectValue_Call struct {
	*mock.Call
}

// FormatReflectValue is a helper method to define mock.On call
//   - tag reflect.StructTag
//   - val reflect.Value
func (_e *ReflectValueFormatter_Expecter) FormatReflectValue(tag interface{}, val interface{}) *ReflectValueFormatter_FormatReflectValue_Call {
	return &ReflectValueFormatter_FormatReflectValue_Call{Call: _e.mock.On("FormatReflectValue", tag, val)}
}

func (_c *ReflectValueFormatter_FormatReflectValue_Call) Run(run func(tag reflect.StructTag, val reflect.Value)) *ReflectValueFormatter_FormatReflectValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.StructTag), args[1].(reflect.Value))
	})
	return _c
}

func (_c *ReflectValueFormatter_FormatReflectValue_Call) Return(_a0 error) *ReflectValueFormatter_FormatReflectValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReflectValueFormatter_FormatReflectValue_Call) RunAndReturn(run func(reflect.StructTag, reflect.Value) error) *ReflectValueFormatter_FormatReflectValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewReflectValueFormatter creates a new instance of ReflectValueFormatter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReflectValueFormatter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReflectValueFormatter {
	mock := &ReflectValueFormatter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
