// Code generated by mockery. DO NOT EDIT.

package mockroamer

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AfterParser is an autogenerated mock type for the AfterParser type
type AfterParser struct {
	mock.Mock
}

type AfterParser_Expecter struct {
	mock *mock.Mock
}

func (_m *AfterParser) EXPECT() *AfterParser_Expecter {
	return &AfterParser_Expecter{mock: &_m.Mock}
}

// AfterParse provides a mock function with given fields: r
func (_m *AfterParser) AfterParse(r *http.Request) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AfterParse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Request) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AfterParser_AfterParse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AfterParse'
type AfterParser_AfterParse_Call struct {
	*mock.Call
}

// AfterParse is a helper method to define mock.On call
//   - r *http.Request
func (_e *AfterParser_Expecter) AfterParse(r interface{}) *AfterParser_AfterParse_Call {
	return &AfterParser_AfterParse_Call{Call: _e.mock.On("AfterParse", r)}
}

func (_c *AfterParser_AfterParse_Call) Run(run func(r *http.Request)) *AfterParser_AfterParse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *AfterParser_AfterParse_Call) Return(_a0 error) *AfterParser_AfterParse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AfterParser_AfterParse_Call) RunAndReturn(run func(*http.Request) error) *AfterParser_AfterParse_Call {
	_c.Call.Return(run)
	return _c
}

// NewAfterParser creates a new instance of AfterParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAfterParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *AfterParser {
	mock := &AfterParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
