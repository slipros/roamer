// Code generated by mockery. DO NOT EDIT.

package mockroamer

import (
	http "net/http"
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// Parser is an autogenerated mock type for the Parser type
type Parser struct {
	mock.Mock
}

type Parser_Expecter struct {
	mock *mock.Mock
}

func (_m *Parser) EXPECT() *Parser_Expecter {
	return &Parser_Expecter{mock: &_m.Mock}
}

// Parse provides a mock function with given fields: r, tag, cache
func (_m *Parser) Parse(r *http.Request, tag reflect.StructTag, cache map[string]interface{}) (interface{}, bool) {
	ret := _m.Called(r, tag, cache)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(*http.Request, reflect.StructTag, map[string]interface{}) (interface{}, bool)); ok {
		return rf(r, tag, cache)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, reflect.StructTag, map[string]interface{}) interface{}); ok {
		r0 = rf(r, tag, cache)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, reflect.StructTag, map[string]interface{}) bool); ok {
		r1 = rf(r, tag, cache)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Parser_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type Parser_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - r *http.Request
//   - tag reflect.StructTag
//   - cache map[string]interface{}
func (_e *Parser_Expecter) Parse(r interface{}, tag interface{}, cache interface{}) *Parser_Parse_Call {
	return &Parser_Parse_Call{Call: _e.mock.On("Parse", r, tag, cache)}
}

func (_c *Parser_Parse_Call) Run(run func(r *http.Request, tag reflect.StructTag, cache map[string]interface{})) *Parser_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(reflect.StructTag), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *Parser_Parse_Call) Return(_a0 interface{}, _a1 bool) *Parser_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Parser_Parse_Call) RunAndReturn(run func(*http.Request, reflect.StructTag, map[string]interface{}) (interface{}, bool)) *Parser_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// Tag provides a mock function with no fields
func (_m *Parser) Tag() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tag")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Parser_Tag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tag'
type Parser_Tag_Call struct {
	*mock.Call
}

// Tag is a helper method to define mock.On call
func (_e *Parser_Expecter) Tag() *Parser_Tag_Call {
	return &Parser_Tag_Call{Call: _e.mock.On("Tag")}
}

func (_c *Parser_Tag_Call) Run(run func()) *Parser_Tag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Parser_Tag_Call) Return(_a0 string) *Parser_Tag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Parser_Tag_Call) RunAndReturn(run func() string) *Parser_Tag_Call {
	_c.Call.Return(run)
	return _c
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
